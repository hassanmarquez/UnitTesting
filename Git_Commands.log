GIT AND GITHUB

git init    Start a repository
git add filename    Add a file to the repository
git commit -m "Version 1"   Send changes to the repository with a comment, the m add the comment
git add .   Add the full folder to the repository
git rm -cached      Remove the file from staging area and get back to be untracked
git log filename    Show the full historical of a file
git log --stat Check specific changes by file
git config --list   Check the configuration details of git
git config --list --show-origin     Check the path of the repositories
git config --global VariableName "Here the value of the variableName"
git show    Show the changes done of the files
git diff "Here is the commit id 1" "Here is the commit id 2"
git reset CommitId --soft    Get back to the version indicate (CommitId), but it doesn't delete the staging area
git reset CommitId --hard    Get back to the version indicate (CommitId), DELETE ALL THE POST COMMITS AFTER THE INDICATED ONE
git checkout commitid filename      Check the status of the filename specified based on the commitid without changing staging area
git checkout master filename      Check the status of the filename based on the last changes commited without changing staging area
git log --oneline   got the list of commitss and shows the commit and the tittle of the commit
git log --decorate  Shows the Head (Last commit where I'm working on)
git log -p Show the number of lines that have change and the content of the file/files changed in all commits
git shortlog Shows the commits that have done a user, showing the username and tittle of the commit
git log --graph --oneline --decorate    Shows the head (last commit and the lists of commits with commitId and commit tittle)
git log --pretty=format:"%cn hizo un commit %h el dia %cd"  Shows a custom name for the commits
git log -3  Show only 3 commits
git log --after=“2018-1-2”  Timeframe personilazed to show commits
git log --after=“today” Timeframe personilazed to show commits
git log --after=“2018-1-2” --before=“today” Timeframe personilazed to show commits
git log --author=AuthorName Show the list of all commits for the AuthorName set
git log --grep=ReferenceWord    Looks for all commits that contains the reference word (keysensitive)
git log --grep=ReferenceWord -i Looks for all commits that contains the reference word (keysensitive)
git log -S ReferenceWord    Looks for commits that contains into the file the ReferenceWord
git log > log.txt Saved the logs in a log file
git branch branchName   Create a branch with name set in branchName
git remote add origin URLofTheOriginHere	Pull the repository from Github to my local git repository
git remote -v	Show the remote repositorios to fetch and pull
git push origin branchName	Send all the information to the main branch - Change the main branch
git log --oneline	Show all commits in a list of one line by commit as description

STEPS GENERATE A KEY IN GIT (Some of the steps are exclusive for mac and wouldn't work with Windows or Linux)
- Command:	ssh-keygen -t rsa -b 4096 -C "hassanmarquez@gmail.com"
- Location in Mac:	/Users/hmarquez/.ssh/id_rsa.pub
- passphrase: hassanmarquez
- The key's randomart image is:
+---[RSA 4096]----+
|                 |
|         . .     |
|      .   = .    |
|     o . = . =   |
|. . = o S + B o  |
|+. o + = O @ +   |
|.o E  . * B O .  |
|  .   .. = o = . |
|       =* . o ...|
+----[SHA256]-----+

--> The next steps will work only on Mac
- Evaluation if the ssh service is running:	eval "$(ssh-agent -s)"
- Create the file config into the /Users/hmarquez/.ssh/id_rsa.pub folder the lines below is the content of the file 
	
host 
	AddKeysToAgent yes
	UseKeychain yes
	IdentifyFile ~/.ssh/id_rsa


- Add the identity	ssh-add -K ~/.ssh/id_rsa
Note: the following link provides the relevant information to create the keys in Mac and Windows --> https://platzi.com/new-home/clases/1557-git-github/19942-uso-de-github/





Github Token
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